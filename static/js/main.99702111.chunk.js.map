{"version":3,"sources":["twitter.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","quote","Quote","react_default","a","createElement","className","concat","this","props","index","Component","ButtonGroup","min","max","Math","floor","random","randomNumber","randomColor","oldNumber","test","generateRandom","length","onGetRandomNumber","onGetRandomColor","style","color","onClick","handleClick","bind","ShareGroup","backgroundColor","href","border","src","logo","alt","width","height","MainContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleRandomNumber","assertThisInitialized","handleRandomColor","setState","App_Quote","App_ButtonGroup","App_ShareGroup","App","App_MainContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99702111.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.89eaa742.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './twitter.svg';\n\nconst quote = [\n  [\"Apa urusan Anda menanyakan itu? Bukan hak Anda juga bertanya kepada saya.\" , \"Edy Rahmayadi\"],\n  [\"Jangan lupa menu ikan untuk Sahur & Buka Puasa. Makan ikan menjadikan kita sehat, pintar. Tidak makan ikan saya tenggelamkan.\", \"Susi Pudjiastuti\"],\n  [\"Kenapa kamu tanya begitu? Heh? Kenapa? Sampai tanya begitu? Heh? Siapa yang suruh? Siapa? Heh? Karena hanya ingin tahu saja?\", \"Soeharto\"],\n  [\"Tidak ada kesalahan yang disebut kesalahan. Kesalahan adalah apa yang jika kita lakukan salah.\", \"Pevita Pearce\"],\n  [\"Despite the constant negative press covfefe.\", \"Donald Trump\"],\n  [\"Ya sekarang kan emang anak kos. Sekarang kan rakyat jelata. Makannya sama-sama.\", \"Setya Novanto\"],\n  [\"Jangan panggil aku anak kecil, Paman. Namaku Shiva.\", \"Shiva\"]\n];\n\nclass Quote extends Component {\n  render() {\n    return (\n      <div>\n        <h2 className=\"quote\">\n          {`\"${quote[this.props.index][0]}\"`}\n        </h2>\n        <h4 className=\"author\">\n          -- {quote[this.props.index][1]}\n        </h4>\n      </div>\n    );\n  }\n}\n\nclass ButtonGroup extends Component {\n  generateRandom(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n    //Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  handleClick() {\n    let randomNumber, randomColor;\n    let oldNumber = this.props.oldNumber;\n    let test = this.generateRandom(0, quote.length-1);\n    let coinToss = this.generateRandom(0, 1);\n    if(coinToss > 0.5 || oldNumber === 0)\n    //let randomNumber = Math.floor(Math.random() * (quote.length-1));\n    if(test === oldNumber) {\n      let coinToss = this.generateRandom(0, 1);\n      if(coinToss > 0.5 || test === 0) {\n        randomNumber = this.generateRandom(oldNumber+1, quote.length-1);\n      } else {\n        randomNumber = this.generateRandom(0, oldNumber-1);\n      }\n    }\n    randomNumber = test;\n    randomColor = `hsl(${this.generateRandom(0,360)}, 100%, 80%)`;\n    this.props.onGetRandomNumber(randomNumber);\n    this.props.onGetRandomColor(randomColor);\n  }\n  render() {\n    return (\n      <div className=\"buttons\">\n        <button\n          className=\"random-button\" style={{color: this.props.color}}\n          onClick={this.handleClick.bind(this)}\n          >\n          Get Quote\n        </button>\n      </div>\n    );\n  }\n}\n\nclass ShareGroup extends Component {\n  render() {\n    return (\n      <div className=\"twitter-share-container\" style={{backgroundColor: this.props.color}}>\n        <a className=\"twitter-share\" href={`https://twitter.com/intent/tweet?text=\"${quote[this.props.index][0]}\" -- ${quote[this.props.index][1]}`} \n          >\n          <img border=\"0\" src={logo} alt=\"twitter logo\" width=\"50\" height=\"50\"/>\n        </a>\n      </div>\n    );\n  }\n}\n\nclass MainContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: Math.floor(Math.random() * quote.length),\n      color: \"hsl(360, 100%, 75%)\"\n    };\n    this.handleRandomNumber = this.handleRandomNumber.bind(this);\n    this.handleRandomColor = this.handleRandomColor.bind(this);\n  }\n  handleRandomNumber(randomNumber) {\n    this.setState({\n      index: randomNumber\n    });\n  }\n  handleRandomColor(randomColor) {\n    this.setState({\n      color: randomColor\n    });\n  }\n  render() {\n    return (\n      <div className=\"main-container\" style={{backgroundColor: this.state.color}}>\n        <Quote index={this.state.index}/>\n        <ButtonGroup onGetRandomNumber={this.handleRandomNumber} onGetRandomColor={this.handleRandomColor} oldNumber={this.state.index} color={this.state.color}/>\n        <ShareGroup index={this.state.index} color={this.state.color}/>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}